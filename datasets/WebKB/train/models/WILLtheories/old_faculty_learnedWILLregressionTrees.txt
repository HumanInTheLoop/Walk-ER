usePrologVariables: true.

% maxTreeDepthInNodes                 = 5
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 3
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10,000
% maxAcceptableNodeScoreToStop        = 0.003
% negPosRatio                         = 2.000
% testNegPosRatio                     = -1.000
% # of pos examples                   = 441
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 14:36:53 5/11/17.  [Using 4,392,656 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.14185106490048804;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
%   else if ( sameperson(A, A) )
%   | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


% Clauses:

faculty(A, -0.14185106490048804) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.8581489350995098) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.1418510649004878) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.14185106490048804) :-  /* #neg=273 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.8581489350995098) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.1418510649004878) :-  /* #neg=14 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

%%%%%  WILL-Produced Tree #2 @ 14:36:53 5/11/17.  [Using 4,520,768 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.12544463852839202;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   else if ( sameperson(A, A) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */


% Clauses:

faculty(A, -0.12544463852839202) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.7194734122109563) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.12544463852839138) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.12544463852839202) :-  /* #neg=306 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.7194734122109563) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.12544463852839138) :-  /* #neg=17 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

%%%%%  WILL-Produced Tree #3 @ 14:36:53 5/11/17.  [Using 4,589,368 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.11231637819360688;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   else if ( sameperson(A, A) )
%   | then return 0.5553664367462833;  // std dev = 5.40e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */


% Clauses:

faculty(A, -0.11231637819360688) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.5553664367462833) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.11231637819360635) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.11231637819360688) :-  /* #neg=294 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.5553664367462833) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.11231637819360635) :-  /* #neg=15 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

%%%%%  WILL-Produced Tree #4 @ 14:36:53 5/11/17.  [Using 4,620,552 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.10159632948783659;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
%   else if ( sameperson(A, A) )
%   | then return 0.41751358415830886;  // std dev = 4.66e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */


% Clauses:

faculty(A, -0.10159632948783659) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.41751358415830886) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.1015963294878363) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.10159632948783659) :-  /* #neg=318 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.41751358415830886) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.1015963294878363) :-  /* #neg=13 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

%%%%%  WILL-Produced Tree #5 @ 14:36:54 5/11/17.  [Using 4,617,632 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.09269127618926043;  // std dev = 1.48e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   else if ( sameperson(A, A) )
%   | then return 0.3207118471601497;  // std dev = 2.92e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


% Clauses:

faculty(A, -0.09269127618926043) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.3207118471601497) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.09269127618926094) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.09269127618926043) :-  /* #neg=291 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.3207118471601497) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.09269127618926094) :-  /* #neg=16 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

%%%%%  WILL-Produced Tree #6 @ 14:36:54 5/11/17.  [Using 4,607,264 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.08518475138839678;  // std dev = 1.03e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   else if ( sameperson(A, A) )
%   | then return 0.25517224256949045;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */


% Clauses:

faculty(A, -0.08518475138839678) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.25517224256949045) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.08518475138839685) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.08518475138839678) :-  /* #neg=296 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.25517224256949045) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.08518475138839685) :-  /* #neg=15 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

%%%%%  WILL-Produced Tree #7 @ 14:36:54 5/11/17.  [Using 4,637,912 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.07877675473109143;  // std dev = 5.58e-08, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
%   else if ( sameperson(A, A) )
%   | then return 0.2097577156325352;  // std dev = 2.51e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


% Clauses:

faculty(A, -0.07877675473109143) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.2097577156325352) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.07877675473109175) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.07877675473109143) :-  /* #neg=271 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.2097577156325352) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.07877675473109175) :-  /* #neg=18 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

%%%%%  WILL-Produced Tree #8 @ 14:36:54 5/11/17.  [Using 4,642,888 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.07324622576333692;  // std dev = 1.05e-07, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
%   else if ( sameperson(A, A) )
%   | then return 0.1770964977452782;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */


% Clauses:

faculty(A, -0.07324622576333692) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.1770964977452782) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.07324622576333704) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.07324622576333692) :-  /* #neg=282 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.1770964977452782) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.07324622576333704) :-  /* #neg=17 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

%%%%%  WILL-Produced Tree #9 @ 14:36:54 5/11/17.  [Using 4,644,552 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.06842697784420294;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   else if ( sameperson(A, A) )
%   | then return 0.15274385809367147;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */


% Clauses:

faculty(A, -0.06842697784420294) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.15274385809367147) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.06842697784420274) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.06842697784420294) :-  /* #neg=287 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.15274385809367147) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.06842697784420274) :-  /* #neg=19 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

%%%%%  WILL-Produced Tree #10 @ 14:36:55 5/11/17.  [Using 4,656,632 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.064191840082026;  // std dev = 1.06e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
%   else if ( sameperson(A, A) )
%   | then return 0.134007030008011;  // std dev = 6.99e-08, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */


% Clauses:

faculty(A, -0.064191840082026) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.134007030008011) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.0641918400820262) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.064191840082026) :-  /* #neg=292 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.134007030008011) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.0641918400820262) :-  /* #neg=21 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for faculty.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
faculty(D, Total) :- // A general accessor. 
   faculty(D, 1000000, Total), !.
faculty(D, Total) :- waitHere("This should not fail", faculty(D, Total)).

faculty(D, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_faculty_tree1(D, TreesToUse, Total1),
   getScore_faculty_tree2(D, TreesToUse, Total2),
   getScore_faculty_tree3(D, TreesToUse, Total3),
   getScore_faculty_tree4(D, TreesToUse, Total4),
   getScore_faculty_tree5(D, TreesToUse, Total5),
   getScore_faculty_tree6(D, TreesToUse, Total6),
   getScore_faculty_tree7(D, TreesToUse, Total7),
   getScore_faculty_tree8(D, TreesToUse, Total8),
   getScore_faculty_tree9(D, TreesToUse, Total9),
   getScore_faculty_tree10(D, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
faculty(D, TreesToUse, Total) :- waitHere("This should not fail", faculty(D, TreesToUse, Total)).

getScore_faculty_tree1(D, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_faculty_tree1(D, TreesToUse, Total1) :- faculty_tree1(D, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_faculty_tree2(D, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_faculty_tree2(D, TreesToUse, Total2) :- faculty_tree2(D, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_faculty_tree3(D, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_faculty_tree3(D, TreesToUse, Total3) :- faculty_tree3(D, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_faculty_tree4(D, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_faculty_tree4(D, TreesToUse, Total4) :- faculty_tree4(D, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_faculty_tree5(D, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_faculty_tree5(D, TreesToUse, Total5) :- faculty_tree5(D, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_faculty_tree6(D, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_faculty_tree6(D, TreesToUse, Total6) :- faculty_tree6(D, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_faculty_tree7(D, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_faculty_tree7(D, TreesToUse, Total7) :- faculty_tree7(D, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_faculty_tree8(D, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_faculty_tree8(D, TreesToUse, Total8) :- faculty_tree8(D, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_faculty_tree9(D, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_faculty_tree9(D, TreesToUse, Total9) :- faculty_tree9(D, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_faculty_tree10(D, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_faculty_tree10(D, TreesToUse, Total10) :- faculty_tree10(D, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(faculty, 2, [
   sameperson(a, a),
   student(a)]).

%%%%%  WILL-Produced Tree Combined @ 14:36:57 5/11/17.  [Using 4,714,416 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.5917469092920843;  // std dev = 0.118, 1,555.000 (wgt'ed) examples reached here.  /* #neg=1,555 */
%   else if ( sameperson(A, A) )
%   | then if ( courseprof(B, A), project(C, A) )
%   | | then if ( courseta(B, D) )
%   | | | then if ( project(E, D) )
%   | | | | then return 3.799991559424199;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | | else return 4.241267953072903;  // std dev = 1.117, 120.000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | | | else return 3.799991559424176;  // std dev = 6.64e-06, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   | | else return 3.7999915594241567;  // std dev = 1.40e-05, 1,110.000 (wgt'ed) examples reached here.  /* #pos=1,110 */
%   | else if ( project(F, A), project(F, G), courseprof(H, G) )
%   | | then if ( courseta(H, I) )
%   | | | then if ( project(F, I) )
%   | | | | then return -0.562826687567353;  // std dev = 0.071, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | | else return -0.5029675881717002;  // std dev = 0.205, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.5706131985322371;  // std dev = 0.152, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.5675957781080218;  // std dev = 0.105, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */


% Clauses:

faculty(A, -0.5917469092920843) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 3.799991559424199) :- 
     sameperson(A, A), 
     courseprof(B, A), 
     project(C, A), 
     courseta(B, D), 
     project(E, D), 
     !. // Clause #2.

faculty(A, 4.241267953072903) :- 
     sameperson(A, A), 
     courseprof(B, A), 
     project(C, A), 
     courseta(B, D), 
     !. // Clause #3.

faculty(A, 3.799991559424176) :- 
     sameperson(A, A), 
     courseprof(B, A), 
     project(C, A), 
     !. // Clause #4.

faculty(A, 3.7999915594241567) :- 
     sameperson(A, A), 
     !. // Clause #5.

faculty(A, -0.562826687567353) :- 
     project(B, A), 
     project(B, C), 
     courseprof(D, C), 
     courseta(D, E), 
     project(B, E), 
     !. // Clause #6.

faculty(A, -0.5029675881717002) :- 
     project(B, A), 
     project(B, C), 
     courseprof(D, C), 
     courseta(D, E), 
     !. // Clause #7.

faculty(A, -0.5706131985322371) :- 
     project(B, A), 
     project(B, C), 
     courseprof(D, C), 
     !. // Clause #8.

faculty(A, -0.5675957781080218) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_faculty(a, -0.5917469092920843) :-  /* #neg=1,555 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 3.799991559424199) :-  /* #pos=80 */ 
   sameperson(a, a),
   courseprof(uniqueVar1, a),
   project(underscore, a),
   courseta(uniqueVar1, uniqueVar2),
   project(underscore, uniqueVar2),
   !. // Flattened version of clause #2.

flattened_faculty(a, 4.241267953072903) :-  /* #pos=120 */ 
   sameperson(a, a),
   courseprof(uniqueVar3, a),
   project(underscore, a),
   courseta(uniqueVar3, underscore),
   !. // Flattened version of clause #3.

flattened_faculty(a, 3.799991559424176) :-  /* #pos=230 */ 
   sameperson(a, a),
   courseprof(underscore, a),
   project(underscore, a),
   !. // Flattened version of clause #4.

flattened_faculty(a, 3.7999915594241567) :-  /* #pos=1,110 */ 
   sameperson(a, a),
   !. // Flattened version of clause #5.

flattened_faculty(a, -0.562826687567353) :-  /* #neg=17 */ 
   project(uniqueVar4, a),
   project(uniqueVar4, uniqueVar5),
   courseprof(uniqueVar6, uniqueVar5),
   courseta(uniqueVar6, uniqueVar7),
   project(uniqueVar4, uniqueVar7),
   !. // Flattened version of clause #6.

flattened_faculty(a, -0.5029675881717002) :-  /* #neg=12 */ 
   project(uniqueVar8, a),
   project(uniqueVar8, uniqueVar9),
   courseprof(uniqueVar10, uniqueVar9),
   courseta(uniqueVar10, underscore),
   !. // Flattened version of clause #7.

flattened_faculty(a, -0.5706131985322371) :-  /* #neg=11 */ 
   project(uniqueVar11, a),
   project(uniqueVar11, uniqueVar12),
   courseprof(underscore, uniqueVar12),
   !. // Flattened version of clause #8.

flattened_faculty(underscore, -0.5675957781080218) :-  /* #neg=33 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   courseprof(uniqueVar10, uniqueVar9)
%   project(uniqueVar4, uniqueVar5)
%   project(underscore, a)
%   project(uniqueVar4, a)
%   courseta(uniqueVar3, underscore)
%   project(underscore, uniqueVar2)
%   courseprof(uniqueVar1, a)
%   courseta(uniqueVar1, uniqueVar2)
%   sameperson(a, a)
%   courseprof(uniqueVar3, a)
%   project(uniqueVar8, a)
%   courseta(uniqueVar10, underscore)
%   courseta(uniqueVar6, uniqueVar7)
%   student(a)
%   project(uniqueVar11, uniqueVar12)
%   project(uniqueVar11, a)
%   project(uniqueVar4, uniqueVar7)
%   courseprof(underscore, a)
%   courseprof(underscore, uniqueVar12)
%   courseprof(uniqueVar6, uniqueVar5)
%   project(uniqueVar8, uniqueVar9)
