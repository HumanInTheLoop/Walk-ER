usePrologVariables: true.

% maxTreeDepthInNodes                 = 5
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 3
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10,000
% maxAcceptableNodeScoreToStop        = 0.003
% negPosRatio                         = 2.000
% testNegPosRatio                     = -1.000
% # of pos examples                   = 459
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 8:56:37 5/11/17.  [Using 3,199,736 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.14185106490048796;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   else if ( sameperson(A, A) )
%   | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */


% Clauses:

faculty(A, -0.14185106490048796) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.8581489350995098) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.14185106490048774) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.14185106490048796) :-  /* #neg=283 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.8581489350995098) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.14185106490048774) :-  /* #neg=22 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

%%%%%  WILL-Produced Tree #2 @ 8:56:38 5/11/17.  [Using 3,298,480 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.125444638528392;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   else if ( sameperson(A, A) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */


% Clauses:

faculty(A, -0.125444638528392) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.7194734122109563) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.12544463852839138) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.125444638528392) :-  /* #neg=300 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.7194734122109563) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.12544463852839138) :-  /* #neg=19 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)

%%%%%  WILL-Produced Tree #3 @ 8:56:38 5/11/17.  [Using 3,386,128 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then return -0.11231637819360694;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   else if ( sameperson(A, A) )
%   | then return 0.5553664367462833;  // std dev = 5.40e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */


% Clauses:

faculty(A, -0.11231637819360694) :- 
     student(A), 
     !. // Clause #1.

faculty(A, 0.5553664367462833) :- 
     sameperson(A, A), 
     !. // Clause #2.

faculty(A, -0.11231637819360635) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_faculty(a, -0.11231637819360694) :-  /* #neg=275 */ 
   student(a),
   !. // Flattened version of clause #1.

flattened_faculty(a, 0.5553664367462833) :-  /* #pos=154 */ 
   sameperson(a, a),
   !. // Flattened version of clause #2.

flattened_faculty(underscore, -0.11231637819360635) :-  /* #neg=19 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   sameperson(a, a)
%   student(a)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for faculty.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).

logPrior(-1.8).
faculty(D, Total) :- // A general accessor. 
   faculty(D, 1000000, Total), !.
faculty(D, Total) :- waitHere("This should not fail", faculty(D, Total)).

faculty(D, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_faculty_tree1(D, TreesToUse, Total1),
   getScore_faculty_tree2(D, TreesToUse, Total2),
   getScore_faculty_tree3(D, TreesToUse, Total3),
   Total is LogPrior + Total1 + Total2 + Total3,
   !.
faculty(D, TreesToUse, Total) :- waitHere("This should not fail", faculty(D, TreesToUse, Total)).

getScore_faculty_tree1(D, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_faculty_tree1(D, TreesToUse, Total1) :- faculty_tree1(D, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_faculty_tree2(D, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_faculty_tree2(D, TreesToUse, Total2) :- faculty_tree2(D, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_faculty_tree3(D, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_faculty_tree3(D, TreesToUse, Total3) :- faculty_tree3(D, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(faculty, 2, [
   sameperson(a, a),
   student(a)]).

%%%%%  WILL-Produced Tree Combined @ 8:56:39 5/11/17.  [Using 3,426,320 memory cells.]  %%%%%

% FOR faculty(A):
%   if ( student(A) )
%   then if ( courseta(B, A) )
%   | then return -0.27528106612922465;  // std dev = 0.073, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( project(C, A), project(C, D), courseprof(E, D) )
%   | | then return -0.30432131806091123;  // std dev = 0.077, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( project(F, A) )
%   | | | then return -0.2878788118047519;  // std dev = 0.075, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return -0.30125340147148205;  // std dev = 0.078, 339.000 (wgt'ed) examples reached here.  /* #neg=339 */
%   else if ( sameperson(A, A) )
%   | then if ( courseprof(G, A), courseta(G, H), project(I, A) )
%   | | then if ( project(J, H) )
%   | | | then return 2.132988784056751;  // std dev = 2.92e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else if ( project(I, K), courseta(L, K) )
%   | | | | then return 2.1329887840567516;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else return 2.2875148263545984;  // std dev = 0.521, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 2.132988784056751;  // std dev = 0.000, 402.000 (wgt'ed) examples reached here.  /* #pos=402 */
%   | else return -0.29951013510019603;  // std dev = 0.070, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */


% Clauses:

faculty(A, -0.27528106612922465) :- 
     student(A), 
     courseta(B, A), 
     !. // Clause #1.

faculty(A, -0.30432131806091123) :- 
     student(A), 
     project(B, A), 
     project(B, C), 
     courseprof(D, C), 
     !. // Clause #2.

faculty(A, -0.2878788118047519) :- 
     student(A), 
     project(B, A), 
     !. // Clause #3.

faculty(A, -0.30125340147148205) :- 
     student(A), 
     !. // Clause #4.

faculty(A, 2.132988784056751) :- 
     sameperson(A, A), 
     courseprof(B, A), 
     courseta(B, C), 
     project(D, A), 
     project(E, C), 
     !. // Clause #5.

faculty(A, 2.1329887840567516) :- 
     sameperson(A, A), 
     courseprof(B, A), 
     courseta(B, C), 
     project(D, A), 
     project(D, E), 
     courseta(F, E), 
     !. // Clause #6.

faculty(A, 2.2875148263545984) :- 
     sameperson(A, A), 
     courseprof(B, A), 
     courseta(B, C), 
     project(D, A), 
     !. // Clause #7.

faculty(A, 2.132988784056751) :- 
     sameperson(A, A), 
     !. // Clause #8.

faculty(A, -0.29951013510019603) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_faculty(a, -0.27528106612922465) :-  /* #neg=59 */ 
   student(a),
   courseta(underscore, a),
   !. // Flattened version of clause #1.

flattened_faculty(a, -0.30432131806091123) :-  /* #neg=133 */ 
   student(a),
   project(uniqueVar1, a),
   project(uniqueVar1, uniqueVar2),
   courseprof(underscore, uniqueVar2),
   !. // Flattened version of clause #2.

flattened_faculty(a, -0.2878788118047519) :-  /* #neg=54 */ 
   student(a),
   project(underscore, a),
   !. // Flattened version of clause #3.

flattened_faculty(a, -0.30125340147148205) :-  /* #neg=339 */ 
   student(a),
   !. // Flattened version of clause #4.

flattened_faculty(a, 2.132988784056751) :-  /* #pos=24 */ 
   sameperson(a, a),
   courseprof(uniqueVar3, a),
   courseta(uniqueVar3, uniqueVar4),
   project(underscore, a),
   project(underscore, uniqueVar4),
   !. // Flattened version of clause #5.

flattened_faculty(a, 2.1329887840567516) :-  /* #pos=3 */ 
   sameperson(a, a),
   courseprof(uniqueVar5, a),
   courseta(uniqueVar5, underscore),
   project(uniqueVar6, a),
   project(uniqueVar6, uniqueVar7),
   courseta(underscore, uniqueVar7),
   !. // Flattened version of clause #6.

flattened_faculty(a, 2.2875148263545984) :-  /* #pos=33 */ 
   sameperson(a, a),
   courseprof(uniqueVar8, a),
   courseta(uniqueVar8, underscore),
   project(underscore, a),
   !. // Flattened version of clause #7.

flattened_faculty(a, 2.132988784056751) :-  /* #pos=402 */ 
   sameperson(a, a),
   !. // Flattened version of clause #8.

flattened_faculty(underscore, -0.29951013510019603) :-  /* #neg=47 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   sameperson(a, a)
%   courseta(uniqueVar3, uniqueVar4)
%   courseta(underscore, a)
%   project(uniqueVar1, uniqueVar2)
%   project(underscore, a)
%   courseta(uniqueVar5, underscore)
%   courseta(uniqueVar8, underscore)
%   project(underscore, uniqueVar4)
%   student(a)
%   courseprof(underscore, uniqueVar2)
%   project(uniqueVar1, a)
%   project(uniqueVar6, a)
%   courseprof(uniqueVar3, a)
%   courseprof(uniqueVar8, a)
%   project(uniqueVar6, uniqueVar7)
%   courseta(underscore, uniqueVar7)
%   courseprof(uniqueVar5, a)
